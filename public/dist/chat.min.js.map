{"version":3,"sources":["chat.js"],"names":["socket","io","username","users","registerUser","document","getElementById","value","trim","emit","style","display","sendMessage","message","timestamp","addMessage","recipient","sender","receiver","concat","Date","toLocaleTimeString","sendPrivateMessage","user","chatbox","createElement","add","appendChild","messageElement","scrollHeight","checkEnter","event","data","status","alert","on","userList","classList","innerHTML","scrollTop","li","privateUserList","option","forEach","notification","textContent"],"mappings":"aACA,IAAMA,OAASC,GAAG,+DAGdC,SAAW,GAAXA,MAAQ,GACRC,SAAJ,GAIA,SAASC,eAEY,MADjBF,SAAWG,SAASC,eAAe,YAAYC,MAAMC,SAOrDR,OAAOS,KAAK,gBAAiB,CAAEP,SAAAA,WAA/BG,SAEAC,eAAA,oBAAAI,MAAAC,QAAA,OAEAN,SAASC,eAAe,gBAAgBI,MAAMC,QAAU,SAVpDT,MAAQ,kCAchB,SAASU,cACL,IAAMC,EAAUR,SAASC,eAAe,WAAWC,MAAMC,OAD7D,GAAA,KAAAK,EAAuB,CACbA,IAAOC,GAAYR,IAAAA,MAAAA,qBAGrBN,OAAOS,KAAK,eAAgB,CAAEP,SAAAA,SAAUW,QAAAA,IAFxCA,WAAYX,SAAIW,EAAAC,GAEhBd,SAAOS,eAAK,WAAgBF,MAAA,GAC5BQ,SAAAA,qBACH,IAAAC,EAAAX,SAAAC,eAAA,mBAAAC,MAOKM,EAAUR,SAASC,eAAe,kBAAkBC,MAAMC,OANvDF,KAATD,GAAmCE,KAAXS,IAG5BhB,OAAAS,KAAA,uBAAA,CAAAQ,OAAAf,SAAAgB,SAAAF,EAAAH,QAAAA,IAMQE,WAAWb,SAAD,aAAAiB,OAAwBN,IAAW,IAAIO,MAAOC,uBALhEhB,SAASiB,eAAT,kBAA8Bf,MAAA,GAG1B,SAAIM,WAAAU,EAAkBP,EAASF,GAC3Bd,IAAMwB,EAAMnB,SAAAC,eAAwB,WAAEW,EAAFZ,SAAAoB,cAAA,OAAoBP,EAAUF,UAA9BU,IAAA,WAAyCb,EAAAA,UAAAA,WAAAA,OAAAA,EAAAA,eAAAA,OAAAA,EAAAA,YAAAA,OAAAA,EAAAA,YAAzCW,EAApCG,YAAAC,GACAb,EAAAA,UAAUS,EAAAK,aA2DlB7B,SAAA8B,WAAUC,GACc,UAAhBC,EAAKC,KACLC,cA1DPlC,OAEDmC,GAAA,YAAA,SAAAH,GAYI7B,MAAQ6B,EACR,IAAMI,EAAW/B,SAASC,eAAe,YAZpCS,EAAiBF,SAASC,eAAW,mBAG1Cc,EAAAA,UAAeS,GACfT,EAAAA,QAAeU,SAAAA,GACfd,IAAQG,EAAAA,SAAYC,cAApB,MACAJ,EAAQe,YAAYf,EAGxBY,EAAAT,YAAAa,KAEIrC,EAAAmC,UAAA,GACAN,EAAMI,QAAW/B,SAAAA,GACXoC,IAAAA,EAAepC,SAAWoB,cAACnB,UAc7BoC,EAAOnC,MAAQgB,EAXnBa,EAASE,YAATf,EACKoB,EAAQhB,YAAQe,OAiBzB1C,OAAOmC,GAAG,cAAe,SAACH,GAVtBS,WAAAA,EAAgBH,SAAYN,EAA5BnB,QAAAmB,EAAAlB,aAII4B,OAAAA,GAAM,sBAAN,SAAAV,GACAS,WAAAA,EAAgBd,SAAhBc,aAAAA,OAAAT,EAAAnB,SAAAmB,EAAAlB,aAKRd,OAAOmC,GAAG,cAAe,SAAAH,GACrBjB,IAAAA,EAAgBb,SAAeW,cAAcC,OAGjD8B,EAAAP,UAAAX,IAAA,gBASIkB,EAAaC,YAAb,GAAA1B,OAA8Ba,EAAK9B,SAAnC,yBARJF,SAAUM,eAAA,WAAuBqB,YAAUiB,GACvC7B,SAAWiB,eAAD,WAAAO,UAA6BP,SAA7B1B,eAAkDQ,WAA5De,eAKA7B,OAAM4C,GAAAA,cAAevC,SAAAA,GACrB,YAAAuC,EAAAA,QACAA,MAAAA,GAAAA,OAAaC,EAAAA,SAAbD","file":"chat.min.js","sourcesContent":["// Initialize Socket.IO client\r\nconst socket = io('https://chat-4aad6bbyg-snehas-projects-dbda7901.vercel.app/');\r\n\r\n// Store user data and messages\r\nlet username = '';\r\nlet users = [];\r\nlet messages = [];\r\n\r\n// Register the user\r\nfunction registerUser() {\r\n    username = document.getElementById('username').value.trim();\r\n    if (username === '') {\r\n        alert('Please enter a valid username.');\r\n        return;\r\n    }\r\n\r\n    // Send registration request to the backend\r\n    socket.emit('register_user', { username });\r\n\r\n    // Show chat section\r\n    document.getElementById('register-section').style.display = 'none';\r\n    document.getElementById('chat-section').style.display = 'block';\r\n}\r\n\r\n// Send a public message\r\nfunction sendMessage() {\r\n    const message = document.getElementById('message').value.trim();\r\n    if (message !== '') {\r\n        const timestamp = new Date().toLocaleTimeString();\r\n        socket.emit('send_message', { username, message });\r\n        addMessage(username, message, timestamp);\r\n    }\r\n    document.getElementById('message').value = '';\r\n}\r\n\r\n// Send a private message\r\nfunction sendPrivateMessage() {\r\n    const recipient = document.getElementById('privateUserList').value;\r\n    const message = document.getElementById('privateMessage').value.trim();\r\n    if (message !== '' && recipient !== '') {\r\n        socket.emit('send_private_message', { sender: username, receiver: recipient, message });\r\n        addMessage(username, `(Private) ${message}`, new Date().toLocaleTimeString());\r\n    }\r\n    document.getElementById('privateMessage').value = '';\r\n}\r\n\r\n// Add message to the chat\r\nfunction addMessage(user, message, timestamp) {\r\n    const chatbox = document.getElementById('chatbox');\r\n    const messageElement = document.createElement('div');\r\n    messageElement.classList.add('message');\r\n    messageElement.innerHTML = `<strong>${user}</strong>: ${message} <span>(${timestamp})</span>`;\r\n    chatbox.appendChild(messageElement);\r\n    chatbox.scrollTop = chatbox.scrollHeight;\r\n}\r\n\r\n// Update user list\r\nsocket.on('user_list', (data) => {\r\n    users = data;\r\n    const userList = document.getElementById('userList');\r\n    const privateUserList = document.getElementById('privateUserList');\r\n    \r\n    // Update user list for public chat\r\n    userList.innerHTML = '';\r\n    data.forEach(user => {\r\n        const li = document.createElement('li');\r\n        li.textContent = user;\r\n        userList.appendChild(li);\r\n    });\r\n\r\n    // Update user list for private chat\r\n    privateUserList.innerHTML = '';\r\n    data.forEach(user => {\r\n        const option = document.createElement('option');\r\n        option.value = user;\r\n        option.textContent = user;\r\n        privateUserList.appendChild(option);\r\n    });\r\n});\r\n\r\n// Handle new public message\r\nsocket.on('new_message', (data) => {\r\n    addMessage(data.username, data.message, data.timestamp);\r\n});\r\n\r\n// Handle new private message\r\nsocket.on('new_private_message', (data) => {\r\n    addMessage(data.username, `(Private) ${data.message}`, data.timestamp);\r\n});\r\n\r\n// Handle user join notifications\r\nsocket.on('user_joined', (data) => {\r\n    const notification = document.createElement('div');\r\n    notification.classList.add('notification');\r\n    notification.textContent = `${data.username} has joined the chat.`;\r\n    document.getElementById('chatbox').appendChild(notification);\r\n    document.getElementById('chatbox').scrollTop = document.getElementById('chatbox').scrollHeight;\r\n});\r\n\r\n// Handle user status change (online/offline)\r\nsocket.on('user_status', (data) => {\r\n    if (data.status === 'offline') {\r\n        alert(`${data.username} has gone offline`);\r\n    }\r\n});\r\n\r\n// Handle Enter key for sending messages\r\nfunction checkEnter(event) {\r\n    if (event.key === 'Enter') {\r\n        sendMessage();\r\n    }\r\n}\r\n\r\n"]}