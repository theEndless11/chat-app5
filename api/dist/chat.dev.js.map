{"version":3,"sources":["chat.js"],"names":["require","Server","module","exports","req","res","setHeader","io","socket","server","console","log","on","data","username","emit","message","status","broadcast","timestamp","Date","toLocaleTimeString","newMessage","isPrivate","sender","receiver","to","send"],"mappings":"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","sourcesContent":["const { Server } = require('socket.io');\r\n\r\nmodule.exports = (req, res) => {\r\n    res.setHeader('Cache-Control', 'no-store, max-age=0');  // Prevent caching\r\n\r\n    const io = new Server(res.socket.server);\r\n\r\n    // Handle socket connection when requested\r\n    if (!res.socket.server.io) {\r\n        console.log('New socket.io server');\r\n        res.socket.server.io = io;\r\n\r\n        io.on('connection', (socket) => {\r\n            console.log('A user connected');\r\n\r\n            // Handle user registration\r\n            socket.on('register_user', (data) => {\r\n                const { username } = data;\r\n                if (!username) {\r\n                    socket.emit('registration_error', { message: 'Username is required' });\r\n                } else {\r\n                    // Emit user join event to all clients\r\n                    socket.emit('user_status', { username, status: 'online' });\r\n                    socket.broadcast.emit('user_joined', { username });\r\n                    console.log(`${username} has joined`);\r\n                }\r\n            });\r\n\r\n            // Handle public messages\r\n            socket.on('send_message', (data) => {\r\n                const { username, message } = data;\r\n                const timestamp = new Date().toLocaleTimeString();\r\n                const newMessage = { username, message, timestamp, isPrivate: false };\r\n                io.emit('new_message', newMessage);\r\n            });\r\n\r\n            // Handle private messages\r\n            socket.on('send_private_message', (data) => {\r\n                const { sender, receiver, message } = data;\r\n                const timestamp = new Date().toLocaleTimeString();\r\n                const newMessage = { username: sender, message, timestamp, isPrivate: true };\r\n                if (receiver) {\r\n                    io.to(receiver).emit('new_private_message', newMessage);\r\n                }\r\n            });\r\n\r\n            // Handle user disconnection\r\n            socket.on('disconnect', () => {\r\n                console.log('A user disconnected');\r\n            });\r\n        });\r\n    }\r\n\r\n    res.send('Socket.io server is running');\r\n};\r\n\r\n"],"file":"chat.dev.js"}