{"version":3,"sources":["chat.js"],"names":["require","Server","module","exports","res","socket","server","console","log","io","on","data","username","emit","status","broadcast","concat","message","newMessage","timestamp","Date","toLocaleTimeString","isPrivate","sender","receiver","send"],"mappings":"0BAAmBA,QAAQ,aAAnBC,gBAAAA,OAERC,OAAOC,QAFYH,SAAAA,EAAQI,GAAnBH,EAAAA,UAGU,gBAAiB,uBADnCC,IAAOC,EAAP,IAAiBF,OAAAG,EAAAC,OAAcC,QAGnBF,EAAGC,OAAIJ,OAAWI,KAItBE,QAAQC,IAAI,yBADXJ,EAAIC,OAAOC,OAAOG,GAAIA,GAEnBJ,GAAJ,aAAuBI,SAAvBJ,GAEME,QAAAC,IAAc,oBAIVH,EAAIK,GAAA,gBAAiB,SAAAC,GAAU,IACZA,EADYA,EACZA,SAChBC,GACDP,EAAAQ,KAAA,cAAA,CAAAD,SAAAA,EAAAE,OAAA,WACGT,EAAAU,UAAAF,KAAA,cAAA,CAAAD,SAAAA,IACHL,QAAAC,IAAA,GAAAQ,OAAAJ,EAAA,iBAHCA,EAAUC,KAAA,qBAAA,CAAAI,QAAA,2BAKXZ,EAAOU,GAAAA,eAAe,SAAAJ,GAAe,IACrCO,EAAeN,CAAAA,SADwBA,EAAAA,SACvCK,QADuCL,EAAAA,QACvCO,WADA,IAAAC,MAAAC,qBACAC,WAAA,GACHb,EAAAI,KAAA,cAAAK,KAKON,EAAAA,GADwB,uBAAA,SAAAD,GAAA,IACFA,EADEA,EACFA,OAAZM,EADcN,EACdM,SAEFC,EAAG,CAAAN,SAAAW,EAAAN,QAHaN,EAAAM,QAGbE,WADD,IAAWE,MAAAA,qBACVC,WAAA,GAAEV,GAAUK,EAAAA,GAAZO,GAAAX,KAAA,sBAAAK,KAIvBb,EAAAK,GAAA,aAAA,WAYIH,QAAQC,IAAI,4BATZJ,EAAAqB,KAAMN","file":"chat.min.js","sourcesContent":["const { Server } = require('socket.io');\r\n\r\nmodule.exports = (req, res) => {\r\n    res.setHeader('Cache-Control', 'no-store, max-age=0');  // Prevent caching\r\n\r\n    const io = new Server(res.socket.server);\r\n\r\n    // Handle socket connection when requested\r\n    if (!res.socket.server.io) {\r\n        console.log('New socket.io server');\r\n        res.socket.server.io = io;\r\n\r\n        io.on('connection', (socket) => {\r\n            console.log('A user connected');\r\n\r\n            // Handle user registration\r\n            socket.on('register_user', (data) => {\r\n                const { username } = data;\r\n                if (!username) {\r\n                    socket.emit('registration_error', { message: 'Username is required' });\r\n                } else {\r\n                    // Emit user join event to all clients\r\n                    socket.emit('user_status', { username, status: 'online' });\r\n                    socket.broadcast.emit('user_joined', { username });\r\n                    console.log(`${username} has joined`);\r\n                }\r\n            });\r\n\r\n            // Handle public messages\r\n            socket.on('send_message', (data) => {\r\n                const { username, message } = data;\r\n                const timestamp = new Date().toLocaleTimeString();\r\n                const newMessage = { username, message, timestamp, isPrivate: false };\r\n                io.emit('new_message', newMessage);\r\n            });\r\n\r\n            // Handle private messages\r\n            socket.on('send_private_message', (data) => {\r\n                const { sender, receiver, message } = data;\r\n                const timestamp = new Date().toLocaleTimeString();\r\n                const newMessage = { username: sender, message, timestamp, isPrivate: true };\r\n                if (receiver) {\r\n                    io.to(receiver).emit('new_private_message', newMessage);\r\n                }\r\n            });\r\n\r\n            // Handle user disconnection\r\n            socket.on('disconnect', () => {\r\n                console.log('A user disconnected');\r\n            });\r\n        });\r\n    }\r\n\r\n    res.send('Socket.io server is running');\r\n};\r\n\r\n"]}