{"version":3,"sources":["server.js"],"names":["express","require","http","socketIo","app","server","createServer","io","use","users","messages","on","socket","console","log","data","username","emit","message","id","Object","keys","status","broadcast","timestamp","Date","toLocaleTimeString","newMessage","isPrivate","push","sender","receiver","to","listen"],"mappings":"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","sourcesContent":["const express = require('express');\r\nconst http = require('http');\r\nconst socketIo = require('socket.io');\r\n\r\nconst app = express();\r\nconst server = http.createServer(app);\r\nconst io = socketIo(server);\r\n\r\napp.use(express.static('public'));  // Serve static files from 'public' directory\r\n\r\n// Store users and messages (in-memory for simplicity)\r\nlet users = {};  // Format: { username: socketId }\r\nlet messages = [];  // List of all public messages\r\n\r\n// When a client connects\r\nio.on('connection', (socket) => {\r\n    console.log('A user connected');\r\n\r\n    // Handle user registration\r\n    socket.on('register_user', (data) => {\r\n        const { username } = data;\r\n        if (users[username]) {\r\n            socket.emit('registration_error', { message: 'Username already taken' });\r\n        } else {\r\n            users[username] = socket.id;  // Assign the socket ID to the username\r\n            io.emit('user_list', Object.keys(users));  // Send updated user list to all clients\r\n            socket.emit('user_status', { username, status: 'online' });  // Notify the user that they're online\r\n            socket.broadcast.emit('user_status', { username, status: 'online' });  // Notify others\r\n            io.emit('user_joined', { username });  // Notify all users about new join\r\n        }\r\n    });\r\n\r\n    // Handle public messages\r\n    socket.on('send_message', (data) => {\r\n        const { username, message } = data;\r\n        const timestamp = new Date().toLocaleTimeString();\r\n        const newMessage = { username, message, timestamp, isPrivate: false };\r\n        messages.push(newMessage);\r\n        io.emit('new_message', newMessage);  // Broadcast the message to all clients\r\n    });\r\n\r\n    // Handle private messages\r\n    socket.on('send_private_message', (data) => {\r\n        const { sender, receiver, message } = data;\r\n        const timestamp = new Date().toLocaleTimeString();\r\n        const newMessage = { username: sender, message, timestamp, isPrivate: true };\r\n        messages.push(newMessage);\r\n        if (users[receiver]) {\r\n            io.to(users[receiver]).emit('new_private_message', newMessage);  // Send the message to the specific user\r\n        }\r\n    });\r\n\r\n    // When a user disconnects\r\n    socket.on('disconnect', () => {\r\n        for (let username in users) {\r\n            if (users[username] === socket.id) {\r\n                delete users[username];  // Remove user from the list\r\n                io.emit('user_list', Object.keys(users));  // Update the user list\r\n                socket.broadcast.emit('user_status', { username, status: 'offline' });  // Notify others\r\n                break;\r\n            }\r\n        }\r\n        console.log('A user disconnected');\r\n    });\r\n});\r\n\r\n// Start the server\r\nserver.listen(3000, () => {\r\n    console.log('Server is running on http://localhost:3000');\r\n});\r\n\r\n"],"file":"server.dev.js"}