{"version":3,"sources":["server.js"],"names":["express","require","http","server","createServer","app","socketIo","use","messages","io","on","socket","log","username","data","users","emit","message","id","Object","keys","status","broadcast","newMessage","timestamp","Date","toLocaleTimeString","isPrivate","push","sender","receiver","to","console","listen"],"mappings":"aAAA,IAAMA,QAAUC,QAAQ,WAClBC,KAAOD,QAAQ,QADfD,SAAUC,QAAQ,aAClBC,IAAOD,UAIPE,OAASD,KAAKE,aAAaC,KAH3BC,GAAAA,SAAWL,QAEjBI,IAAMA,IAAGL,QAAGA,OAAZ,WAIAK,IAAIE,MAAIP,GAERQ,SAAA,GAKAC,GAAGC,GAAG,aAAc,SAACC,GAHjBH,QAAQI,IAAG,oBAGZF,EAAGA,GAAA,gBAAeC,SAAAA,GAAW,IAChBE,EAAAC,EAAAD,SAKJE,MAAMF,GAFJF,EAAAK,KAAA,qBAA2B,CAAAC,QAAA,4BAK7BF,MAAMF,GAAYF,EAAOO,GAHzBH,GAAMF,KAAAA,YAAWM,OAAAC,KAAAL,QACXJ,EAAMK,KAAA,cAAZ,CAAkCH,SAAAA,EAAAQ,OAAA,WAAEJ,EAASK,UAAAN,KAAA,cAAA,CAAAH,SAAAA,EAAAQ,OAAA,WAA7CZ,GAAAO,KAAA,cAAA,CAAAH,SAAAA,OAWRF,EAAOD,GAAG,eAAgB,SAACI,GAAS,IAPiBS,EAAE,CAAAV,SAApBC,EAApBE,SAAwCC,QAApBH,EAAfG,QAAmCO,WAApB,IAAAC,MAAAC,qBAAoBC,WAAA,GAA/CnB,SAA6DoB,KAAAL,GAYjEd,GAAGO,KAAK,cAAeO,KAXkBZ,EAAkCD,GAAA,uBAAA,SAAAI,GAAA,IAgBnEe,EAA8Bf,EAA9Be,OAAQC,EAAsBhB,EAAtBgB,SAfajB,EAAAA,CAAAA,SAAAA,EAAAA,QAeSC,EAAZG,QAfGJ,WAAjB,IAAeY,MAAAC,qBAAEb,WAAAA,GAAzBL,SAAuCoB,KAAAL,GAC1CR,MAAAe,IAGLrB,GAAAsB,GAAAhB,MAAAe,IAAAd,KAAA,sBAAAO,KAGIZ,EAAMa,GAAAA,aAAY,WACZD,IAAAA,IAAAA,KAAaR,MAAEF,GAAAA,MAAAA,KAAFF,EAAAO,GAAA,QAAAH,MAAAF,GAA8BJ,GAATe,KAAAA,YAArBL,OAAAC,KAAAL,QAAyCJ,EAAEW,UAAAN,KAAA,cAAA,CAAAH,SAAAA,EAAAQ,OAAA,YAA9D,MAKJW,QAAApB,IAAA,2BAC4CT,OAAA8B,OACdhB,IAAYH,WACtCkB,QAAMR,IAAAA","file":"server.min.js","sourcesContent":["const express = require('express');\r\nconst http = require('http');\r\nconst socketIo = require('socket.io');\r\n\r\nconst app = express();\r\nconst server = http.createServer(app);\r\nconst io = socketIo(server);\r\n\r\napp.use(express.static('public'));  // Serve static files from 'public' directory\r\n\r\n// Store users and messages (in-memory for simplicity)\r\nlet users = {};  // Format: { username: socketId }\r\nlet messages = [];  // List of all public messages\r\n\r\n// When a client connects\r\nio.on('connection', (socket) => {\r\n    console.log('A user connected');\r\n\r\n    // Handle user registration\r\n    socket.on('register_user', (data) => {\r\n        const { username } = data;\r\n        if (users[username]) {\r\n            socket.emit('registration_error', { message: 'Username already taken' });\r\n        } else {\r\n            users[username] = socket.id;  // Assign the socket ID to the username\r\n            io.emit('user_list', Object.keys(users));  // Send updated user list to all clients\r\n            socket.emit('user_status', { username, status: 'online' });  // Notify the user that they're online\r\n            socket.broadcast.emit('user_status', { username, status: 'online' });  // Notify others\r\n            io.emit('user_joined', { username });  // Notify all users about new join\r\n        }\r\n    });\r\n\r\n    // Handle public messages\r\n    socket.on('send_message', (data) => {\r\n        const { username, message } = data;\r\n        const timestamp = new Date().toLocaleTimeString();\r\n        const newMessage = { username, message, timestamp, isPrivate: false };\r\n        messages.push(newMessage);\r\n        io.emit('new_message', newMessage);  // Broadcast the message to all clients\r\n    });\r\n\r\n    // Handle private messages\r\n    socket.on('send_private_message', (data) => {\r\n        const { sender, receiver, message } = data;\r\n        const timestamp = new Date().toLocaleTimeString();\r\n        const newMessage = { username: sender, message, timestamp, isPrivate: true };\r\n        messages.push(newMessage);\r\n        if (users[receiver]) {\r\n            io.to(users[receiver]).emit('new_private_message', newMessage);  // Send the message to the specific user\r\n        }\r\n    });\r\n\r\n    // When a user disconnects\r\n    socket.on('disconnect', () => {\r\n        for (let username in users) {\r\n            if (users[username] === socket.id) {\r\n                delete users[username];  // Remove user from the list\r\n                io.emit('user_list', Object.keys(users));  // Update the user list\r\n                socket.broadcast.emit('user_status', { username, status: 'offline' });  // Notify others\r\n                break;\r\n            }\r\n        }\r\n        console.log('A user disconnected');\r\n    });\r\n});\r\n\r\n// Start the server\r\nserver.listen(3000, () => {\r\n    console.log('Server is running on http://localhost:3000');\r\n});\r\n\r\n"]}