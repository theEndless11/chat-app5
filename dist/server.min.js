"use strict";var express=require("express"),http=require("http"),socketIo=require("socket.io"),app=express(),server=http.createServer(app),io=socketIo(server);app.use(express.static("public"));var users={},messages=[];io.on("connection",function(r){console.log("A user connected"),r.on("register_user",function(e){var s=e.username;users[s]?r.emit("registration_error",{message:"Username already taken"}):(users[s]=r.id,io.emit("user_list",Object.keys(users)),r.emit("user_status",{username:s,status:"online"}),r.broadcast.emit("user_status",{username:s,status:"online"}),io.emit("user_joined",{username:s}))}),r.on("send_message",function(e){var s={username:e.username,message:e.message,timestamp:(new Date).toLocaleTimeString(),isPrivate:!1};messages.push(s),io.emit("new_message",s)}),r.on("send_private_message",function(e){var s=e.sender,r=e.receiver,t={username:s,message:e.message,timestamp:(new Date).toLocaleTimeString(),isPrivate:!0};messages.push(t),users[r]&&io.to(users[r]).emit("new_private_message",t)}),r.on("disconnect",function(){for(var e in users)if(users[e]===r.id){delete users[e],io.emit("user_list",Object.keys(users)),r.broadcast.emit("user_status",{username:e,status:"offline"});break}console.log("A user disconnected")})}),server.listen(3e3,function(){console.log("Server is running on http://localhost:3000")});
//# sourceMappingURL=server.min.js.map
